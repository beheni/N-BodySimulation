#version 430 core

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 1) uniform image2D posImgInput;              
layout(rgba32f, binding = 2) uniform image2D posImgOutput;              
layout(rgba32f, binding = 3) uniform image2D velImgInput;              
layout(rgba32f, binding = 4) uniform image2D velImgOutput;   

uniform float deltaTime;
uniform float particleMass;
uniform float G;

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  
    vec4 velocity = imageLoad(velImgInput, texelCoord);
    vec4 position = imageLoad(posImgInput, texelCoord);

    // change velocity
    uint totalNum = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z * 
                    gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z;
    vec4 f = vec4(0, 0, 0, 0);

    for(uint i = 0; i < velImgInput.textureSize2d.x; ++i){
        for(uint j = 0; j < velImgInput.textureSize2d.y; ++j){
            ivec2 curTexel = ivec2(i, j);
            vec4 curVel = imageLoad(velImgInput, curTexel);
            vec4 curPos = imageLoad(posImgInput, curTexel);

            vec4 pathVec = curPos - position;
            float dist = pow(pathVec.x * pathVec.x + pathVec.y * pathVec.y + pathVec.z * pathVec.z, 1/2);
            float distCub = dist * dist * dist;

            pathVec = pathVec / distCub;

            f = f + pathVec;
        }
    }

    f = f * G * particleMass;
    velocity = velocity + f;

    imageStore(velImgOutput, texelCoord, velocity);

    position = position + velocity * deltaTime;  
    imageStore(posImgOutput, texelCoord, position);
}