#version 430 core

// Note that there exist hardware limits - look these up for your GPU via https://www.khronos.org/opengl/wiki/Compute_Shader#Limitations
// sizeof(local_value[]) : Must be <= GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
// local_size_x          : Must be <= GL_MAX_COMPUTE_WORK_GROUP_SIZE

#define FlipCode		0
#define DisperseCode    1

#define fast_mode(a, b) ((a) & ((b) - 1)) // fast mode for b == 2^n

layout (local_size_x = 512, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer mortonCodeBufferInput
{
    uint mortonCodesInputSSBO[];
};
layout(std430, binding = 2) buffer mortonCodeBufferOutput
{
    uint mortonCodesOutputSSBO[];
};
layout(std430, binding = 3) buffer particleIdBufferInput
{
    uint particleIdInputSSBO[];
};
layout(std430, binding = 4) buffer particleIdBufferOutput
{
    uint particleIdOutputSSBO[];
};

uniform uint u_H;
uniform uint u_Algorithm;

void CompareAndSwap(ivec2 id)
{
	uint leftMorton = mortonCodesInputSSBO[id.x];
	uint rightMorton = mortonCodesInputSSBO[id.y];

	if (leftMorton > rightMorton)
	{
		mortonCodesOutputSSBO[id.x] = rightMorton;
		mortonCodesOutputSSBO[id.y] = leftMorton;

		//particleIdOutputSSBO[id.x] = particleIdInputSSBO[id.y];
		//particleIdOutputSSBO[id.y] = particleIdInputSSBO[id.x];
	}
	else
	{
		mortonCodesOutputSSBO[id.x] = leftMorton;
		mortonCodesOutputSSBO[id.y] = rightMorton;

		//particleIdOutputSSBO[id.x] = particleIdInputSSBO[id.x];
		//particleIdOutputSSBO[id.y] = particleIdInputSSBO[id.y];
	}
}

void Flip(uint h)
{
	ivec2 pair;

	uint ID = fast_mode(gl_GlobalInvocationID.x, h/2);

	pair.x = int(	ID + h * int(gl_GlobalInvocationID.x / h));
	pair.y = int(h -ID + h * int(gl_GlobalInvocationID.x / h) - 1);

	CompareAndSwap(pair);
}

void Disperse(uint h)
{
	ivec2 pair;

	pair.x = int(fast_mode(gl_GlobalInvocationID.x,h/2) + h * int(gl_GlobalInvocationID.x / h));
	pair.y = pair.x + int(h / 2);
	
	CompareAndSwap(pair);
}

void main()
{
	switch (u_Algorithm)
	{
	case FlipCode:		Flip(u_H);		break;
	case DisperseCode:	Disperse(u_H);	break;
	};
}
