#version 430 core

struct TreeNode_t 
{
	vec4 centerOfMass;
	float totalMass;
	ivec2 children;
	float boundingBoxMetric;
};

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer posInputBuffer
{
    vec4 positionInputSSBO[];
};      
layout(std430, binding = 2) buffer posOutputBuffer
{
    vec4 positionOutputSSBO[];
}; 
layout(std430, binding = 3) buffer velInputBuffer
{
    vec4 velInputSSBO[];
}; 
layout(std430, binding = 4) buffer velOutputBuffer
{
    vec4 velOutputSSBO[];
};
layout(std430, binding = 5) buffer particleIdBuffer
{
    uint particleIdSSBO[];
};
layout(std430, binding = 6) buffer treeNodesBuffer
{
    TreeNode_t treeNodesSSBO[];
};

uniform float   u_DeltaTime;
uniform vec3    u_BoundingBox;
uniform int     u_ParticleMass;
uniform int     u_NumberOfParticlesSqrt;

float G = 6.6743 * pow(10, -11);

bool considerSingleBody(vec4 curNodePosition, vec4 centerOfMass, float boundingBoxMetric)
{
    float threshold = 0.5;
    float dist = sqrt(
        pow(curNodePosition.x - centerOfMass.x, 2) + 
        pow(curNodePosition.y - centerOfMass.y, 2) + 
        pow(curNodePosition.z - centerOfMass.z, 2));

    if (boundingBoxMetric / dist < threshold)
        return true;
    return false;
};

void main()
{
    uint invocationId = gl_GlobalInvocationID.x;
    uint id = particleIdSSBO[invocationId];
    // i - index of leaf node (proceed in this invocation) in the treeNodesSSBO,
    // and also in all input and output buffers with positions and velocities
    vec4 position = positionInputSSBO[id];
    vec4 velocity = velInputSSBO[id];

    // allocate traversal stack and push NULL
    TreeNode_t stack[32];
    int stackPos = -1;

    #define pop() stack[stackPos--]
    #define push(data)  stack[++stackPos] = data

    TreeNode_t NullNode = TreeNode_t(vec4(0.0, 0.0, 0.0, 0.0), 0.0, ivec2(0, 0), 0.0);
    push(NullNode);
    
    vec4 f = vec4(0, 0, 0, 0);

    // traverse nodes starting from the root
    TreeNode_t curNode = treeNodesSSBO[u_NumberOfParticlesSqrt*u_NumberOfParticlesSqrt];
    for(int i = 0; i < u_NumberOfParticlesSqrt * u_NumberOfParticlesSqrt; ++i)
    {
        // if current node is a leaf - just calculate force
        // otherwise (internal node) - compare with threshold
        if (curNode.children == ivec2(-1, -1) || 
            considerSingleBody(
                positionInputSSBO[particleIdSSBO[i]]/* TODO-FIX: out-of-bounds indexing*/, 
                curNode.centerOfMass, 
                curNode.boundingBoxMetric
                )
            )
        {
        // TODO-FIX: veeeery crappy physics calculations
            vec4 pathVec = curNode.centerOfMass - position;
            float dist = length(pathVec) + 1;
            float invDistCub = 1.0 / (dist * dist * dist);

            pathVec = pathVec * curNode.totalMass * invDistCub;
            f = f + pathVec;
        } else {
            // proceed with traversal and add child nodes to the stack
            push(treeNodesSSBO[curNode.children.x]);
            push(treeNodesSSBO[curNode.children.y]);
        }
        curNode = pop();

        if (curNode == NullNode)
            break;
    }

    f = f * G * u_ParticleMass;
    velocity = velocity + f;
    position = position + velocity * u_DeltaTime;  

    if(abs(position.x) > u_BoundingBox.x || 
       abs(position.y) > u_BoundingBox.y ||
       abs(position.z) > u_BoundingBox.z)
    {
        //position = vec4(0, 0, 0, 0);
        velocity = velocity * vec4(-1,-1,-1,-1);
        position = position + velocity * u_DeltaTime;  
    }

    velOutputSSBO[id]       = velocity;
    positionOutputSSBO[id]  = position;
}
