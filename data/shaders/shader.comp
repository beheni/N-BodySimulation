#version 430 core

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(std430, binding = 1) buffer posInputBuffer
{
    vec4 positionInputSSBO[];
};            
layout(std430, binding = 2) buffer posOutputBuffer
{
    vec4 positionOutputSSBO[];
};             
layout(std430, binding = 3) buffer velInputBuffer
{
    vec4 velInputSSBO[];
};             
layout(std430, binding = 4) buffer velOutputBuffer
{
    vec4 velOutputSSBO[];
}; 



uniform float deltaTime;
uniform vec3 boundingBox;
float G = 0.01;

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  
    vec4 velocity = velInputSSBO[128 * texelCoord.x + texelCoord.y];
    vec4 position = positionInputSSBO[128 * texelCoord.x + texelCoord.y];
    // change velocity
    vec4 f = vec4(0, 0, 0, 0);

    for(uint i = 0; i < 128; ++i)
    {
        for(uint j = 0; j < 128; ++j)
        {
            ivec2 curTexel = ivec2(i, j);
            vec4 curPos = positionInputSSBO[128 * curTexel.x + curTexel.y];

            vec4 pathVec = curPos - position;
            float dist = length(pathVec) + 1;
            float invDistCub = 1.0 / (dist * dist * dist);

            pathVec = pathVec * invDistCub;

            f = f + pathVec;
        }
    }

    f = f * G;
    velocity = velocity + f;
    position = position + velocity * deltaTime;  

    if(abs(position.x) > boundingBox.x || 
       abs(position.y) > boundingBox.y ||
       abs(position.z) > boundingBox.z)
    {
        //position = vec4(0, 0, 0, 0);
        velocity = velocity * vec4(-1,-1,-1,-1);
        position = position + velocity * deltaTime;  
    }

    velOutputSSBO[128 * texelCoord.x + texelCoord.y] = velocity;
    positionOutputSSBO[128 * texelCoord.x + texelCoord.y] = position;
}