#version 430 core

struct TreeNode_t 
{
	vec4 centerOfMass;
	float totalMass;
	ivec2 children;
	float boundingBoxMetric;
};

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(std430, binding = 1) buffer posInputBuffer
{
    vec4 posInputSSBO[];
}; 
layout(std430, binding = 2) buffer particleIdBuffer
{
    uint particleIdSSBO[];
};
layout(std430, binding = 5) buffer mortonCodeBuffer
{
    uint mortonCodesSSBO[];
};
layout(std430, binding = 6) buffer treeNodesBuffer
{
    TreeNode_t treeNodesSSBO[];
};

uniform int u_NumberOfParticlesSqrt;
uniform int u_ParticleMass;

float calculateBoundingBox(int i, int j)
{
	int left = min(i, j);
	int right = max(i, j);

	uint firstId =  particleIdSSBO[left];

	float maximumX = posInputSSBO[firstId].x;
	float minimumX = posInputSSBO[firstId].x;
	float maximumY = posInputSSBO[firstId].y;
	float minimumY = posInputSSBO[firstId].y;
	float maximumZ = posInputSSBO[firstId].z;
	float minimumZ = posInputSSBO[firstId].z;
	
	for (int i = left + 1; left <= right; ++left)
	{
		uint id = particleIdSSBO[i];
		maximumX = max(maximumX, posInputSSBO[id].x);
		minimumX = min(minimumX, posInputSSBO[id].x);
		maximumY = max(maximumY, posInputSSBO[id].y);
		minimumY = min(minimumY, posInputSSBO[id].y);
		maximumZ = max(maximumZ, posInputSSBO[id].z);
		minimumZ = min(minimumZ, posInputSSBO[id].z);
	}

	return max(max(maximumX - minimumX, maximumY - minimumY), maximumZ - minimumZ);
}

vec4 findCenterOfMass(int i, int j)
{
	vec4 centerOfMass = vec4(0, 0, 0, 0);
	int left = min(i, j);
	int right = max(i, j);
	int numberOfChildren = right - left + 1;
	int totalMass = numberOfChildren * u_ParticleMass;
	for (int i = 0; i < numberOfChildren; ++i) 
	{
		uint id = particleIdSSBO[left + i];
		centerOfMass.x += (u_ParticleMass * posInputSSBO[id].x)/totalMass;
		centerOfMass.y += (u_ParticleMass * posInputSSBO[id].y)/totalMass;
		centerOfMass.z += (u_ParticleMass * posInputSSBO[id].z)/totalMass;
	}
	return centerOfMass;
};

int sharedPrefixLength(int i, int j)
{
	if(j < 0 || j >= u_NumberOfParticlesSqrt * u_NumberOfParticlesSqrt) return -1;
	uint mi = mortonCodesSSBO[i];
	uint mj = mortonCodesSSBO[j];

	if(mi!=mj)
	{
		uint x = mi ^ mj;
		float f = log2(float(x) + 0.5);
		return 32 - int(f);
	}
	else
	{
		int x = i ^ j;
		float f = log2(float(x) + 0.5);
		return 64 - int(f);
	}
}

void main()
{
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	int i = u_NumberOfParticlesSqrt * texelCoord.x + texelCoord.y;
	//if (i >= u_NumberOfParticlesSqrt * u_NumberOfParticlesSqrt - 1) {
		//return;
	//}
	int direction = sign(sharedPrefixLength(i, i + 1) - sharedPrefixLength(i, i - 1));

	int minPrefixLength =  sharedPrefixLength(i, i - direction);
	int upperBound = 2;

	while(sharedPrefixLength(i, i + upperBound*direction) > minPrefixLength)
	{
		upperBound *= 2;
	}

	int l = 0;
    int t = upperBound/2;

    for(int k = 0; k<log2(u_NumberOfParticlesSqrt)+2; k++){
        if (sharedPrefixLength(i, i + (l + t) * direction) > minPrefixLength)
		{
            l = l+t;
        }
        if(t==1) break;
        t /= 2;
    }

	int j = i + l * direction;

	int dNode = sharedPrefixLength(i, j);
	int splitPos = 0;
	float ft = float(l)/2.;
    for(int k = 0; k<log2(u_NumberOfParticlesSqrt)+2; k++){
        t = int(max(1.,ceil(ft)));
        if(sharedPrefixLength(i, i + (splitPos + t) * direction ) > dNode){
            splitPos += t;
        }
		if(t==1) break;
        ft /= 2.;
    }
	int biggestLeftChild = i + splitPos * direction + min(0, direction);
	int leftChildIndex;
	int rightChildIndex;
	if (min(i, j) == biggestLeftChild) 
	{
		leftChildIndex = biggestLeftChild;
		treeNodesSSBO[leftChildIndex] = TreeNode_t(posInputSSBO[particleIdSSBO[leftChildIndex]], u_ParticleMass, ivec2(-1, -1), 1.0);
	}
	else 
	{
		leftChildIndex = biggestLeftChild + u_NumberOfParticlesSqrt * u_NumberOfParticlesSqrt;
	}
	if (max(i, j) == biggestLeftChild + 1) 
	{
		rightChildIndex = biggestLeftChild + 1;
		treeNodesSSBO[rightChildIndex] = TreeNode_t(posInputSSBO[particleIdSSBO[rightChildIndex]], u_ParticleMass, ivec2(-1, -1), 1.0);
	}
	else 
	{
		rightChildIndex = biggestLeftChild + 1 + u_NumberOfParticlesSqrt * u_NumberOfParticlesSqrt;
	}

	vec4 centerMass = findCenterOfMass(i, j);
	float boundingBox = calculateBoundingBox(i, j);

	treeNodesSSBO[u_NumberOfParticlesSqrt * u_NumberOfParticlesSqrt + i] = TreeNode_t(centerMass, l*u_ParticleMass, ivec2(leftChildIndex, rightChildIndex), boundingBox);
}
